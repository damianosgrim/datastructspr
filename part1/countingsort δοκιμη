#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>
typedef struct Data {
char date[10];
float T_degC;
long int PO4uM;
float SiO3uM;
float NO2uM;
float NO3uM;
float Salnty;
float O2ml_L
} data;


void openCSV(data data[]){// Substitute the full file path
    // for the string file_path
    FILE* fp = fopen("ocean.csv", "r");

    if (!fp)
        printf("Can't open file\n");

    else {

        char buffer[1024];



        int row = 0;
        int column = 0;
        int r=0;

        while (fgets(buffer,1024, fp)) {
            column = 0;
            row++;
            r++;


            // To avoid printing of column
            // names in file can be changed
            // according to need
            if (row == 1)
                continue;

            // Splitting the data
            char* value = strtok(buffer, ", ");

            while (value) {
                // Column 1
                if (column == 0) {
                    strcpy(data[r].date, value);
                }

                // Column 2
                if (column == 1) {
                    data[r].T_degC = atof(value);
                }

                // Column 3
                if (column == 2) {
                  data[r].PO4uM= atol(value);
                }
                if (column == 3) {
                    data[r].SiO3uM = atof(value);
                }
                if (column == 4) {
                    data[r].NO2uM = atof(value);
                }
                if (column == 5) {
                    data[r].NO3uM = atof(value);
                }
                if (column == 6) {
                    data[r].Salnty = atof(value);
                }

                if (column == 7) {
                    data[r].O2ml_L = atof(value);
                }

                value = strtok(NULL, ", ");
                column++;
            }

            printf("\n");
        }

        // Close the file
        fclose(fp);
}
}

 void createCSV1(data data[],int s){
     FILE *fpt;

    fpt = fopen("countingsort.csv", "w+");
    fprintf(fpt,"Date,       PO4Um,       T_degC,      SiO3uM,      NO2uM,      NO3uM,      Salnty,       O2ml_L\n");
    for (int i=2; i<s; i++)
    {

        fprintf(fpt,"%s,  %f,   %f,   %f,   %f,   %f,   %f,   %f\n",data[i].date, data[i].PO4uM, data[i].T_degC,data[i].SiO3uM,data[i].NO2uM, data[i].NO3uM,data[i].Salnty, data[i].O2ml_L);
    }

    fclose(fpt);
 }


void countingSort(data arr[], int s) {
  int output[1406];

  // Find the largest element of the array
  int max = arr[0].PO4uM;
  for (int i = 1; i < s; i++) {
    if (arr[i].PO4uM > max)
      max = arr[i].PO4uM;
  }

  // The size of count must be at least (max+1) but
  // we cannot declare it as int count(max+1) in C as
  // it does not support dynamic memory allocation.
  // So, its size is provided statically.
  int count[5];

  // Initialize count array with all zeros.
  for (int i = 0; i <= max; ++i) {
    count[i] = 0;
  }

  // Store the count of each element
  for (int i = 0; i < s; i++) {
    count[arr[i].PO4uM]++;
  }

  // Store the cummulative count of each array
  for (int i = 1; i <= max; i++) {
    count[i] += count[i - 1];
  }

  // Find the index of each element of the original array in count array, and
  // place the elements in output array
  for (int i = s - 1; i >= 0; i--) {
    output[count[arr[i].PO4uM] - 1] = arr[i].PO4uM;
    count[arr[i].PO4uM]--;
  }

  // Copy the sorted elements into original array
  for (int i = 0; i < s; i++) {
    arr[i].PO4uM = output[i];
  }
}
 void printArray(data data[], int s)
{
    for(int i=2; i<s; i++)
    { printf("Date:%s  PO4uM:%ld  Temp:%f  SiO3uM:%f  NO2uM:%f  NO3uM:%f  Salnty:%f  O2ml_L:%f\n", data[i].date, data[i].PO4uM, data[i].T_degC, data[i].SiO3uM, data[i].NO2uM, data[i].NO3uM, data[i].Salnty, data[i].O2ml_L);
}
}

  int main() {
       data d[1406];

         openCSV(d);
        int s = sizeof(d) / sizeof(d[0]);


          countingSort(d, s);
         printf("the elements were sorted using countingsort \n");
        printArray(d , s);
 return 0;
  }
